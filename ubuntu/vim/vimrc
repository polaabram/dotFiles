" Vundle
    " Setting up Vundle - the vim plugin bundler
        let iCanHazVundle=1
        let vundle_readme=expand("~/.vim/bundle/vundle/README.md")
        if !filereadable(vundle_readme)
        "if !isdirectory("~/.vim/bundle/vundle")
            echo "Installing Vundle.."
            echo ""
            silent !mkdir -p ~/.vim/bundle
            silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
            let iCanHazVundle=0
        endif
        set rtp+=~/.vim/bundle/vundle/
        call vundle#rc()
        Bundle 'gmarik/vundle'

    " Bundles
        " General Vim
            Bundle 'scrooloose/nerdtree'
            Bundle 'tpope/vim-fugitive'
            Bundle 'kien/ctrlp.vim'
            Bundle 'majutsushi/tagbar'
            Bundle 'ZoomWin'
            Bundle 'rosenfeld/conque-term'
            Bundle 'SirVer/ultisnips'
            Bundle 'scrooloose/syntastic'
            Bundle 'bling/vim-airline'
            Bundle 'Valloric/YouCompleteMe'
            Bundle 'altercation/vim-colors-solarized'
            Bundle 'mattn/emmet-vim'
            Bundle 'Rykka/colorv.vim'
            Bundle 'flazz/vim-colorschemes'
            Bundle 'terryma/vim-multiple-cursors'

    if iCanHazVundle == 0
        echo "Installing Bundles, please ignore key map error messages"
        echo ""
        :BundleInstall
        "call localbundle#init()
        ":LocalBundle
    endif
    "call localbundle#init()
"Colors
    set t_Co=256
    let g:solarized_termcolors=256
    colorscheme solarized
    set background=dark

"Set Vim defaults
    set history=256                " Number of things to remember in history.
    set timeoutlen=50             " Time to wait after ESC (default causes an
    " annoying delay)
    set modeline
    set modelines=5                " default numbers of lines to read for
    set autowrite                  " Writes on make/shell commands
    set autoread
    set hidden                     " The current buffer can be put to the
    " background without writing to disk
    set hlsearch                   " highlight search
    set incsearch                  " show matches while typing
    let g:is_posix = 1             " vim's default is archaic bourne shell,
    set tabstop=4                  " tab size eql 4 spaces
    set softtabstop=4
    set sts=4
    set sw=4
    set expandtab
    set textwidth=0
    set colorcolumn=80
    set autoindent
    set mouse=a "enable mouse in GUI mode
    set mousehide                 " Hide mouse after chars typed
    set showmatch                 " Show matching brackets.
    set novisualbell              " No blinking
    set noerrorbells              " No noise.
    set encoding=utf8
    set wrap "Wrap lines
    set number                    " Line numers
    set laststatus=2              " Airline will display status bar from the start
    try
        lang en_US
    catch
    endtry

    let NERDTreeShowHidden = 1
    let NERDTreeIgnore          =   ['\.pyc$','\.swp$']                 "ignore compiled python files
    set wildignore+=*.pyc
    set backspace=2

    let g:ycm_show_diagnostics_ui = 0

    let g:syntastic_check_on_open = 0
    let g:syntastic_auto_loc_list = 0
    let g:syntastic_style_warning_symbol = '✻'
    let g:syntastic_style_error_symbol = '✻'
    let g:syntastic_error_symbol = '✗'
    let g:syntastic_warning_symbol='⚠'
    highlight SyntasticStyleErrorSign guibg=yellow
    highlight SyntasticStyleWarningSign guifg=yellow

    let g:powerline_symbols = 'fancy'
    let g:airline_theme = 'wombat'

    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif
    let g:airline_symbols.branch = '⭠'
    let g:airline_section_b = ''
    let g:tagbar_usearrows = 1
    let g:tagbar_autofocus = 1

    " If you prefer the Omni-Completion tip window to close when a selection is
    " " made, these lines close it on movement in insert mode or when leaving
    " " insert mode
    autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
    autocmd InsertLeave * if pumvisible() == 0|pclose|endif

    " YouCompleteMe
    nnoremap <silent> <F3> :YcmCompleter GoTo<CR>

"##############################################################################
"" Easier split navigation
"##############################################################################
"
"" Use ctrl-[hjkl] to select the active split!
nmap <silent> <c-k> :wincmd k<CR>
nmap <silent> <c-j> :wincmd j<CR>
nmap <silent> <c-h> :wincmd h<CR>
nmap <silent> <c-l> :wincmd l<CR>

" Keymaps
    vnoremap <C-c> "*y
    map <silent> <c-o> :TagbarToggle<CR>
    map <silent> <F2> :silent NERDTreeToggle <CR>
    map <F3> <Esc> :YcmCompleter GoToDefinitionElseDeclaration<CR>
    map <silent> <F4> <ESC>:CtrlP<RETURN>
    call togglebg#map("<F5>")
    nmap <silent> <F7> <ESC>:/\s\+$<CR>
    nmap <silent> <F8> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" End key
nmap <esc>OF $
imap <esc>OF <esc>$a
cmap <esc>OF <end>

" Home key
imap <esc>OH <esc>0i
cmap <esc>OH <home>
nmap <esc>OH 0

" Keymaps end
    syntax enable                      " enable syntax
    filetype plugin indent on " load filetype plugins/indent settings
    let mapleader = ","
